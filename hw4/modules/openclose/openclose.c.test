#include <stdlib.h>
#include <sys/stat.h>
#include <assert.h>
#include <stdio.h>
#include <string.h>
#include <fcntl.h>
#include <unistd.h>

struct stat sb;
int i,result, fd, count, lenght;
char path[15] = "/dev/openclose";
char num[4];
int *fd_array;

static int seq_open(int opens, char* path);
char* itoa(int num, char* buffer, int base);

int main() {
	for(i = 0;i < 257 ;i++){
		sprintf(num, "%d", i);
		strcat(path,num);
		result = stat(path, &sb);

		assert(result >= 0);
		assert(S_ISCHR(sb.st_mode));
		//Open each device minor times
		//assert(i == seq_open(i,path));
		//printf("%d,%d",i, seq_open(i,path));
		//Open each device minor times +1
		// i should be equal to the return value
		// because the next open fails and doesnt
		// have an impact on return value
		//assert(i == seq_open(++i,path));
		strcpy(path,"/dev/openclose");	
	}
	return 0;
}
//fnkt opens each device minor times
// returns count of succesfull opens
// return value should be equal to minor number
static int seq_open(int opens, char* path){
	fd_array = (int *) malloc(opens*sizeof(int));
	count = 0;
	for(i = 0;i < opens; i++){
		fd = open(path,O_RDWR);
		if(fd < 0) {
			continue;
		}
		fd_array[i] = fd;
		count++;
		
	}
	lenght = sizeof(fd_array) / sizeof(int);
	for(i = 0; i < lenght; i++) {
		close(fd_array[i]);
	}
	return count;
}
/*

static int suc_close(int opens, char* path){
	count = 0;
	for(i= 0;i < opens;i++) {
		fd = open(path,O_RDWR);
		if(fd < 0) {
			close(fd);
			open(path,O_RDWR);
			continue;
		}
		count++;
	}
	return count;
}
*/


// Implementation of itoa() 
char* itoa(int num, char* str, int base) 
{ 
    int i = 0; 
    bool isNegative = false; 
  
    /* Handle 0 explicitely, otherwise empty string is printed for 0 */
    if (num == 0) 
    { 
        str[i++] = '0'; 
        str[i] = '\0'; 
        return str; 
    } 
  
    // In standard itoa(), negative numbers are handled only with  
    // base 10. Otherwise numbers are considered unsigned. 
    if (num < 0 && base == 10) 
    { 
        isNegative = true; 
        num = -num; 
    } 
  
    // Process individual digits 
    while (num != 0) 
    { 
        int rem = num % base; 
        str[i++] = (rem > 9)? (rem-10) + 'a' : rem + '0'; 
        num = num/base; 
    } 
  
    // If number is negative, append '-' 
    if (isNegative) 
        str[i++] = '-'; 
  
    str[i] = '\0'; // Append string terminator 
  
    // Reverse the string 
    reverse(str, i); 
  
    return str; 
} 