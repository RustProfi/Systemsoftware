#include <stdlib.h>
#include <sys/stat.h>
#include <assert.h>
#include <stdio.h>
#include <string.h>
#include <fcntl.h>
#include <unistd.h>

struct stat sb;
int fd, result;
char path[15] = "/dev/openclose";
char num[4];

static int seq_open(int opens, char* path);

int main() {
	int i;
	for(i = 0;i < 257 ;i++){
		sprintf(num, "%d", i);
		strcat(path,num);
		result = stat(path, &sb);
		assert(result >= 0);
		assert(S_ISCHR(sb.st_mode));
		//Open each device minor times
		assert(i == seq_open(i,path));
		//Open each device minor times +1
		// i should be equal to the return value
		// because the next open fails and doesnt
		// have an impact on return value
		assert(i == seq_open(i + 1 ,path));
		strcpy(path,"/dev/openclose");	
	}
	return 0;
}
//fnkt opens each device minor times
// returns count of succesfull opens
// return value should be equal to minor number
static int seq_open(int opens, char* path){
	int i, n, count, length;
	count = 0;
	for(i = 0;i < opens; i++){
		fd = open(path,O_RDWR);
		fd_array[i] = fd;
		if(fd == -1) {
			continue;
		}
		count++;
	}
	if(fd_array[opens] != -1){
		close(fd_array[opens]);
		fd = open(path,O_RDWR);
		if(fd == -1){
			perror("unsucessful");
		}
		printf("%d open after close\n", opens);
	} else {
		close(fd_array[opens - 1]);
		fd = open(path,O_RDWR);
		if(fd == -1){
			perror("failed");
		}
		printf("%d open after close2\n", opens);
	}
	for(n=0;n < opens+1; n++){
		close(fd_array[n]);
	}
	return count;
}



int fd_array[256];
