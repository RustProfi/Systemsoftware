#include <stdlib.h>
#include <sys/stat.h>
#include <assert.h>
#include <stdio.h>
#include <string.h>
#include <fcntl.h>
#include <unistd.h>

struct stat sb;
int fd, result;
char path[15] = "/dev/openclose";
char num[4];

static int seq_open(int opens, char* path);

int main() {
	int i;
	for(i = 0;i < 257 ;i++){
		sprintf(num, "%d", i);
		strcat(path,num);
		result = stat(path, &sb);
		assert(result >= 0);
		assert(S_ISCHR(sb.st_mode));
		//Open each device minor times + 1 
		assert(i == seq_open(i,path));
		open_after_close(i,path);
		strcpy(path,"/dev/openclose");	
	}
	return 0;
}
//fnkt opens each device minor times
// returns count of succesfull opens
// return value should be equal to minor number
static int seq_open(int opens, char* path){
	int i, count;
	count = 0;
	for(i = 0;i < opens +1 ; i++){
		fd = open(path,O_RDWR);
		if(fd == -1) {
			continue;
		}
		count++;
	}
	return count;
}

static void open_after_close(int opens, char* path){
	int i, n;
	int fd_array[256];
	for(i = 0;i < opens; i++){
		fd = open(path,O_RDWR);
		fd_array[i] = fd;
	}
	close(fd_array[opens])
	fd = open(path,O_RDWR);
	if(fd == -1){
		perror("open after close failed");
	}
	printf("open after close succesful\n");
	for(n=0;n < opens+1; n++){
		close(fd_array[n]);
	}
}





