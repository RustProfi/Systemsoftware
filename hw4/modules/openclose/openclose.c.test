#include <stdlib.h>
#include <sys/stat.h>
#include <assert.h>
#include <stdio.h>
#include <string.h>
#include <fcntl.h>
#include <unistd.h>

struct stat sb;
int i,result, fd, count, lenght;
char path[15] = "/dev/openclose";
char num[4];
int *fd_array;

static int seq_open(int opens, char* path);

int main() {
	for(i = 0;i < 257 ;i++){
		//sprintf(num, "%d");
		itoa(i,num);
		strcat(path,num);
		result = stat(path, &sb);

		assert(result >= 0);
		assert(S_ISCHR(sb.st_mode));
		//Open each device minor times
		//assert(i == seq_open(i,path));
		//printf("%d,%d",i, seq_open(i,path));
		//Open each device minor times +1
		// i should be equal to the return value
		// because the next open fails and doesnt
		// have an impact on return value
		//assert(i == seq_open(++i,path));
		strcpy(path,"/dev/openclose");	
	}
	return 0;
}
//fnkt opens each device minor times
// returns count of succesfull opens
// return value should be equal to minor number
static int seq_open(int opens, char* path){
	fd_array = (int *) malloc(opens*sizeof(int));
	count = 0;
	for(i = 0;i < opens; i++){
		fd = open(path,O_RDWR);
		if(fd < 0) {
			continue;
		}
		fd_array[i] = fd;
		count++;
		
	}
	lenght = sizeof(fd_array) / sizeof(int);
	for(i = 0; i < lenght; i++) {
		close(fd_array[i]);
	}
	return count;
}

 /* itoa:  convert n to characters in s */
 void itoa(int n, char s[])
 {
     int i, sign;
 
     if ((sign = n) < 0)  /* record sign */
         n = -n;          /* make n positive */
     i = 0;
     do {       /* generate digits in reverse order */
         s[i++] = n % 10 + '0';   /* get next digit */
     } while ((n /= 10) > 0);     /* delete it */
     if (sign < 0)
         s[i++] = '-';
     s[i] = '\0';
     reverse(s);
 }

 /* reverse:  reverse string s in place */
 void reverse(char s[])
 {
     int i, j;
     char c;
 
     for (i = 0, j = strlen(s)-1; i<j; i++, j--) {
         c = s[i];
         s[i] = s[j];
         s[j] = c;
     }
 }