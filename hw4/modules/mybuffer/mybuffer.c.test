#define _GNU_SOURCE
#include <stdlib.h>
#include <sys/stat.h>
#include <assert.h>
#include <stdio.h>
#include <string.h>
#include <fcntl.h>
#include <unistd.h>
#include <errno.h>
#include <pthread.h>

int fd, done, raceend, rd, wr;
char buf[100], racebuf1[32], racebuf2[32];

char *teststr = "FilltheBufferFilltheBufferFilltheBuffer";
char *bytestr = "ThisIsA32ByteString:DDDDDDDDDDDD";
char *race1 = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
char *race2 = "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB";

pthread_cond_t e, f = PTHREAD_COND_INITIALIZER;
pthread_mutex_t m = PTHREAD_MUTEX_INITIALIZER;

void *myread(void *);
void *onlyread(void *);
void *mywrite(void *);
void *mywrite2(void *);
void *racecar1(void *);
void *racecar2(void *);
void *racecar3(void *);

int main() {
    int s, retval;
    struct timespec ts;
    pthread_t t1, t2;
    done, raceend = 0;
    fd = open("/dev/mybuffer", O_RDWR);

    if(fd <0) {
        return 1;
    }

//1. möglichkeot  
	pthread_create(&t1, NULL, onlyread, &fd);
	sleep(1);
	write(fd,teststr, 50);
        pthread_join(t1, NULL);
   	printf("AMK\n");
  
//2. möglichkeit
    //First read then write
/*    pthread_create(&t1, NULL, myread, &fd);
    pthread_create(&t2, NULL, mywrite, &fd);
    pthread_join(t1, NULL);
    pthread_join(t2, NULL);
    printf("AMK");
    //read full buffer write to full buffer
    pthread_create(&t1, NULL, myread, &fd);
    pthread_create(&t2, NULL, mywrite2, &fd);
    pthread_join(t1, NULL);
    pthread_join(t2, NULL);
*/
    //Loop until race occurs
    pthread_create(&t1, NULL, racecar1, &fd);
    pthread_create(&t2, NULL, racecar2, &fd);
    pthread_join(t1, NULL);
    pthread_join(t2, NULL);  

    return 0;
}

void *myread(void *fd) {
    pthread_t tt1;
   
    pthread_mutex_lock(&m);
    while(done == 1)
	pthread_cond_wait(&f, &m);
    done++;
    printf("Erst read\n");
    //start blocking call read in new thread
    pthread_create(&tt1, NULL, onlyread, fd);
    //get sure it blocks
    sleep(1);
    pthread_cond_signal(&e);
    pthread_mutex_unlock(&m);
    
    pthread_join(tt1, NULL);
}

void *onlyread(void *fd) {
    printf("ich warte lol\n");
    read(*(int *)fd, buf, 100);
}

void *mywrite(void *fd) {
    pthread_mutex_lock(&m);
    while(done == 0)
	pthread_cond_wait(&e, &m);
    done--;
    printf("dann write\n");
    write(*(int *)fd, teststr, 50);
    pthread_cond_signal(&f);
    pthread_mutex_unlock(&m);
}

void *mywrite2(void *fd) {
    pthread_mutex_lock(&m);
    while(done == 0)
        pthread_cond_wait(&e, &m);
    done--;
    printf("dann auf vollen speicher schreiben\n");
    write(*(int *)fd, bytestr, 50);
    pthread_cond_signal(&f);
    pthread_mutex_unlock(&m);    
}

void *racecar1(void *fd) {
    while(1) {
    	wr = write(*(int *)fd, race1, 32);
    	rd = read(*(int *)fd, racebuf1, 32);
        if(strncmp(racebuf1, race1, 32) != 0 || raceend == 1)
		break;
    }
    raceend = 1;  
    printf("Race occured: Thread1 with A's expect A's but read: %s\n", racebuf1);
}

void *racecar2(void *fd) {
    while(1) {
        wr = write(*(int *)fd, race2, 32);

        rd = read(*(int *)fd, racebuf2, 32);
	if(strncmp(racebuf2, race2, 32) != 0 || raceend == 1)
                break;
    }
    raceend = 1;
    printf("Race occured: Thread2 with B's expect B's but read: %s\n", racebuf2);
}
